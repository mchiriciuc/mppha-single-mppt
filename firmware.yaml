# ============================================================================
# Voltronic Solar Inverter - ESPHome Configuration
# ============================================================================
# Device: Voltronic Style Solar Inverter Interface 
# Hardware: MPPHA
# Interface: UART to Voltronic Protocol
# 
# CHANGELOG:
# v1.2.4 - 2025-10-06
# - Initial release
# ============================================================================

# ============================================================================
# SUBSTITUTIONS
# ============================================================================
substitutions:
  name: mppha_single
  friendly_name: MPPHA Single
  log_level_default: "INFO"
  ap_ssid: "${name} - Setup"
  ap_pass: "setup1234"
  project_name: "mchiriciuc.mppha-dual-mppt"
  project_version: "1.2.4"
  import_url: "github://mchiriciuc/mppha-single-mppt/firmware.yaml@v1.2.4"


# ============================================================================
# DEVICE CONFIGURATION
# ============================================================================
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  project:
    name: ${project_name}
    version: ${project_version}
  on_boot:
    - logger.set_level:
        level: ${log_level_default}

esp32:
  board: esp32-s3-devkitc-1
  framework:
    sdkconfig_options:
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"
    type: esp-idf

# ============================================================================
# DASHBOARD IMPORT
# ============================================================================
dashboard_import:
  package_import_url: ${import_url}
  import_full_config: false

# ============================================================================
# LOGGING
# ============================================================================
logger:
  level: VERY_VERBOSE

# ============================================================================
# DEBUGGING
# ============================================================================
debug:

# ============================================================================
# HOME ASSISTANT API
# ============================================================================
api:
  encryption:
    key: "wIEGrFGM2ynGNsU+31nG5XEK5r06cxh8lsqGAxskO/Q="
  reboot_timeout: 0s  # Don't auto-reboot on API disconnect

# ============================================================================
# ESP32 IMPROV - WiFi Provisioning
# ============================================================================
esp32_improv:
  authorizer: none
  status_indicator: status_led_light


# ============================================================================
# OTA UPDATES
# ============================================================================
ota:
  platform: esphome

# ============================================================================
# NETWORK CONFIGURATION
# ============================================================================
wifi:
  enable_btm: true    # 802.11v support
  enable_rrm: true    # 802.11k support  

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${ap_ssid}
    password: ${ap_pass}
    ap_timeout: 0s
  
  # Add MAC address suffix to AP name for unique identification
  name_add_mac_suffix: true

captive_portal:

# ============================================================================
# WEB SERVER
# ============================================================================
web_server:
  port: 80
  log: on
  version: 3
#  local: true
#  css_include: "v3/webserver-v2.css"
#  css_url: ""
#  js_include: "v3/www.js"
#  js_url: "" 

# ============================================================================
# UART CONFIGURATION
# ============================================================================
uart:
  - id: uart_bus
    tx_pin: GPIO6
    rx_pin: GPIO7
    baud_rate: 2400

# ============================================================================
# PIPSOLAR INTEGRATION
# ============================================================================
pipsolar:
  - uart_id: uart_bus
    id: inverter0  

# ============================================================================
# DIAGNOSTIC SENSORS - GRID
# ============================================================================
sensor:
  - platform: pipsolar
    pipsolar_id: inverter0

    grid_voltage:
      name: "Grid Voltage"
      icon: mdi:transmission-tower
    grid_frequency:
      name: "Grid Frequency"
      icon: mdi:sine-wave

# ============================================================================
# DIAGNOSTIC SENSORS - INVERTER
# ============================================================================
    bus_voltage:
      name: "Bus Voltage"
      entity_category: diagnostic
      icon: mdi:current-dc
    inverter_heat_sink_temperature:
      name: "Heat Sink Temperature"
      icon: mdi:thermometer

# ============================================================================
# SENSORS - SOLAR (PV)
# ============================================================================
    pv_input_voltage:
      name: "PV Voltage"
      icon: mdi:solar-power
    pv_input_current_for_battery:
      name: "PV Current"
      icon: mdi:current-dc
    pv_charging_power:
      name: "PV Power"
      icon: mdi:solar-power

# ============================================================================
# SENSORS - BATTERY
# ============================================================================
    battery_voltage:
      name: "Battery Voltage"
      icon: mdi:battery-charging
    battery_charging_current:
      name: "Battery Charging Current"
      icon: mdi:current-dc
    battery_discharge_current:
      name: "Battery Discharge Current"
      icon: mdi:current-dc

# ============================================================================
# CONFIGURATION SENSORS - BATTERY SETTINGS
# ============================================================================
    battery_under_voltage:
      name: "Battery Under Voltage"
      icon: mdi:battery-alert
      id: battery_under_voltage
      internal: True
      on_value:
        then:
          - select.set:
              id: select_battery_under_voltage
              option: !lambda return str_sprintf("%.1f", id(battery_under_voltage).state); 
    battery_bulk_voltage:
      name: "Battery Bulk Charge"
      id: battery_bulk_charge
      entity_category: DIAGNOSTIC      
      icon: mdi:battery-charging-100
    battery_float_voltage:
      name: "Battery Float Charge"
      icon: mdi:battery-charging-80
      entity_category: DIAGNOSTIC
      id: battery_float_charge
      on_value:
        then:
          - select.set:
              id: select_battery_float_charge_voltage
              option: !lambda return str_sprintf("%.1f", id(battery_float_charge).state);
    battery_recharge_voltage:
      name: "Battery Recharge Voltage"
      icon: mdi:battery-charging-50
      id: battery_recharge_voltage
      entity_category: diagnostic
      on_value:
        then:
          - select.set:
              id: select_battery_recharge_voltage
              option: !lambda return str_sprintf("%.1f", id(battery_recharge_voltage).state);      
    battery_redischarge_voltage:
      name: "Battery Redischarge Voltage"
      icon: mdi:battery-minus
      entity_category: diagnostic      
      id: battery_redischarge_voltage
      on_value:
        then:
          - select.set:
              id: select_battery_redischarge_voltage
              option: !lambda return str_sprintf("%.1f", id(battery_redischarge_voltage).state);            
    battery_type:
      name: "Battery Type Code"
      id: battery_type_code
      internal: true
      icon: mdi:battery
      on_value:
        then:
          - text_sensor.template.publish:
              id: battery_type_text
              state: !lambda |-
                if (id(battery_type_code).state == 0) return "AGM";
                else if (id(battery_type_code).state == 1) return "User-Defined";
                else if (id(battery_type_code).state == 2) return "Pylontech";
                else if (id(battery_type_code).state == 3) return "WECO";
                else if (id(battery_type_code).state == 4) return "Soltaro";
                else if (id(battery_type_code).state == 5) return "Lib-protocol";
                else return "Unknown";

# ============================================================================
# CONFIGURATION SENSORS - CHARGING SETTINGS
# ============================================================================
    current_max_ac_charging_current:
      name: "Battery Max AC Charging Current"
      icon: mdi:current-ac
      id: max_ac_charging_current
      entity_category: DIAGNOSTIC
      on_value:
        then:
          - select.set:
              id: select_max_ac_charging_current
              option: !lambda return str_sprintf("%.1f", id(max_ac_charging_current).state);            
    current_max_charging_current:
      id: max_charging_current
      name: "Battery Max Charging Current"
      icon: mdi:battery-charging-high
      entity_category: DIAGNOSTIC
      on_value:
        then:
          - select.set:
              id: select_max_charging_current
              option: !lambda return str_sprintf("%.1f", id(max_charging_current).state);                  
    charger_source_priority:
      name: "Battery Charge Source Priority"
      icon: mdi:priority-high
      id: charger_source_priority
      internal: true
      on_value:
        then:
          - select.set_index:
              id: select_charger_source_priority
              index: !lambda return id(charger_source_priority).state; 

# ============================================================================
# CONFIGURATION SENSORS - OUTPUT SETTINGS
# ============================================================================
    output_source_priority:
      name: "Output Source Priority"
      icon: mdi:electric-switch
      id: output_source_priority
      internal: true
      on_value:
        then:
          - select.set_index:
              id: select_output_source_priority
              index: !lambda return id(output_source_priority).state;

# ============================================================================
# SENSORS - OUTPUT
# ============================================================================
    ac_output_apparent_power:
      name: "Output Apparent Power"
      icon: mdi:flash
    ac_output_active_power:
      name: "Output Active Power"
      icon: mdi:lightning-bolt
    ac_output_voltage:
      name: "Output Voltage"
      icon: mdi:sine-wave
    output_load_percent:
      name: "Output Load Percent"
      icon: mdi:percent
    output_mode:
      name: "Output Mode"
      icon: mdi:information
      entity_category: diagnostic

# ============================================================================
# BINARY SENSORS - STATUS
# ============================================================================
binary_sensor:
  - platform: pipsolar
    pipsolar_id: inverter0      
    charging_status:
      name: "Charging Status"
      entity_category: diagnostic
      icon: mdi:battery-charging

# ============================================================================
# DIAGNOSTIC BINARY SENSORS - FAULTS
# ============================================================================
    faults_present:
      name: "Faults Present"
      entity_category: diagnostic
      icon: mdi:alert-circle
    fault_inverter_fault:
      name: "Fault - Inverter Fault"
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_over:
      name: "Fault - Bus Over"
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_under:
      name: "Fault - Bus Under"
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_soft_fail:
      name: "Fault - Bus Soft Fail"
      entity_category: diagnostic
      icon: mdi:alert
    fault_opvshort:
      name: "Fault - OPV Short"
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_voltage_too_low:
      name: "Fault - Voltage Too Low"
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_voltage_too_high:
      name: "Fault - Voltage Too High"
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_over_current:
      name: "Fault - Over Current"
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_soft_failed:
      name: "Fault - Inverter Soft Failed"
      entity_category: diagnostic
      icon: mdi:alert
    fault_self_test_failed:
      name: "Fault - Self Test Failed"
      entity_category: diagnostic
      icon: mdi:alert
    fault_op_dc_voltage_over:
      name: "Fault - OP DC Voltage Over"
      entity_category: diagnostic
      icon: mdi:alert
    fault_battery_open:
      name: "Fault - Battery Open"
      entity_category: diagnostic
      icon: mdi:battery-alert
    fault_current_sensor_failed:
      name: "Fault - Current Sensor Failed"
      entity_category: diagnostic
      icon: mdi:alert
    fault_battery_short:
      name: "Fault - Battery Short"
      entity_category: diagnostic
      icon: mdi:battery-alert
    fault_mppt_overload:
      name: "Fault - MPPT Overload"
      entity_category: diagnostic
      icon: mdi:alert
    fault_dc_dc_over_current:
      name: "Fault - DC-DC Over Current"
      entity_category: diagnostic
      icon: mdi:alert
    fault_code:
      name: "Fault - Fault Code"
      entity_category: diagnostic
      icon: mdi:alert

# ============================================================================
# DIAGNOSTIC BINARY SENSORS - WARNINGS
# ============================================================================
    warnings_present:
      name: "Warnings Present"
      entity_category: diagnostic
      icon: mdi:alert-circle-outline
    warning_power_loss:
      name: "Warning - Power Loss"
      entity_category: diagnostic
      icon: mdi:power-plug-off
    warning_line_fail:
      name: "Warning - Line Fail"
      entity_category: diagnostic
      icon: mdi:transmission-tower-off
    warning_over_temperature:
      name: "Warning - Over Temperature"
      entity_category: diagnostic
      icon: mdi:thermometer-alert
    warning_fan_lock:
      name: "Warning - Fan Lock"
      entity_category: diagnostic
      icon: mdi:fan-alert
    warning_battery_voltage_high:
      name: "Warning - Battery Voltage High"
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_low_alarm:
      name: "Warning - Battery Low Alarm"
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_under_shutdown:
      name: "Warning - Battery Under Voltage Shutdown"
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_derating:
      name: "Warning - Battery Derating"
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_over_load:
      name: "Warning - Over Load"
      entity_category: diagnostic
      icon: mdi:alert
    warning_eeprom_failed:
      name: "Warning - EEPROM Failed"
      entity_category: diagnostic
      icon: mdi:chip
    warning_power_limit:
      name: "Warning - Power Limit"
      entity_category: diagnostic
      icon: mdi:speedometer
    warning_pv_voltage_high:
      name: "Warning - PV Voltage High"
      entity_category: diagnostic
      icon: mdi:solar-power
    warning_mppt_overload:
      name: "Warning - MPPT Overload"
      entity_category: diagnostic
      icon: mdi:alert
    warning_battery_too_low_to_charge:
      name: "Warning - Battery Too Low to Charge"
      entity_category: diagnostic
      icon: mdi:battery-alert
    warnung_low_pv_energy:
      name: "Warning - PV Low Energy"
      entity_category: diagnostic
      icon: mdi:solar-power
    warning_high_ac_input_during_bus_soft_start:
      name: "Warning - High AC Input During Bus Soft Start"
      entity_category: diagnostic
      icon: mdi:alert
    warning_battery_equalization:
      name: "Warning - Battery Equalization"
      entity_category: diagnostic
      icon: mdi:battery-sync

# ============================================================================
# DIAGNOSTIC TEXT SENSORS - DEVICE MODE
# ============================================================================
text_sensor:
  - platform: debug
    reset_reason:
      name: "Reset Reason"
      entity_category: DIAGNOSTIC

  - platform: template
    name: "Battery Type"
    id: battery_type_text
    entity_category: diagnostic
    icon: mdi:battery

  - platform: template
    name: "Device Mode"
    id: device_mode_str
    entity_category: diagnostic
    icon: mdi:information
  
  - platform: pipsolar
    pipsolar_id: inverter0
    device_mode:
      name: "Device Mode Raw"
      internal: true
      id: device_mode
      on_value:
        then: 
          - lambda: |-
              auto dstate = "Bad apples";
              if (x == "B") dstate = "Battery";
              else if (x == "L") dstate = "Grid";
              else if (x == "P") dstate = "Power on";
              else if (x == "S") dstate = "Standby";
              else if (x == "F") dstate = "Fault";
              else if (x == "D") dstate = "Shutdown";              
              id(device_mode_str).publish_state(dstate);

# ============================================================================
# STATUS INDICATORS
# ============================================================================
light:
  - platform: status_led
    name: "Status LED"
    id: status_led_light
    entity_category: diagnostic
    icon: mdi:led-on
    pin: 
      number: GPIO45
      inverted: True

# ============================================================================
# PIPSOLAR OUTPUT CONTROLS
# ============================================================================
output:
  - platform: pipsolar
    pipsolar_id: inverter0
    battery_recharge_voltage:
      id: output_battery_recharge_voltage
      possible_values: [43.0,44.0,45.0,46.0,47.0,48.0,49.0]
    battery_float_voltage:
      id: output_battery_float_voltage      
      possible_values: [52.0,52.1,52.2,52.3,52.4,52.5,52.6,52.7,52.8,52.9,53.0,53.1,53.2,53.3]
    battery_redischarge_voltage:
      id: output_battery_redischarge_voltage      
      possible_values: [00.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.0]      
    battery_under_voltage:
      id: output_battery_under_voltage
    current_max_ac_charging_current:
      id: output_max_ac_charging_current
      possible_values: [2.0,10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0]
    current_max_charging_current:
      id: output_max_charging_current 
      possible_values: [10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0]
    output_source_priority:
      id: output_output_source_priority
    charger_source_priority:
      id: output_charger_source_priority

# ============================================================================
# CONFIGURATION SELECTS
# ============================================================================
select:
  - platform: template
    name: "Log Level"
    id: select_log_level
    icon: mdi:math-log
    entity_category: config
    options:
      - "NONE"
      - "ERROR"
      - "WARN"
      - "INFO"
      - "DEBUG"
      - "VERBOSE"
      - "VERY_VERBOSE"
    initial_option: ${log_level_default}
    optimistic: true
    set_action:
      - if:
          condition:
            lambda: 'return x == "NONE";'
          then:
            - logger.set_level:
                level: NONE
      - if:
          condition:
            lambda: 'return x == "ERROR";'
          then:
            - logger.set_level:
                level: ERROR
      - if:
          condition:
            lambda: 'return x == "WARN";'
          then:
            - logger.set_level:
                level: WARN
      - if:
          condition:
            lambda: 'return x == "INFO";'
          then:
            - logger.set_level:
                level: INFO
      - if:
          condition:
            lambda: 'return x == "DEBUG";'
          then:
            - logger.set_level:
                level: DEBUG
      - if:
          condition:
            lambda: 'return x == "VERBOSE";'
          then:
            - logger.set_level:
                level: VERBOSE
      - if:
          condition:
            lambda: 'return x == "VERY_VERBOSE";'
          then:
            - logger.set_level:
                level: VERY_VERBOSE

  - platform: template
    name: "Charging Source Priority"
    id: select_charger_source_priority
    entity_category: config
    icon: mdi:battery-charging-wireless
    options:
      - "Utility first"
      - "Solar first"
      - "Solar and utility"
      - "Solar only"
    optimistic: True
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_charger_source_priority
            value: !lambda |-               
              auto val = id(select_charger_source_priority).index_of(x.c_str());
              return val.value();

  - platform: template
    name: "Output Source Priority"
    id: select_output_source_priority
    entity_category: config
    icon: mdi:electric-switch
    options:
      - "Utility first"
      - "Solar/Utility/Battery"
      - "Solar/Battery/Utility"
    optimistic: True
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_output_source_priority
            value: !lambda |-               
              auto val = id(select_output_source_priority).index_of(x.c_str());
              return val.value();

  - platform: template
    name: "Max. Charging Current"
    id: select_max_charging_current
    entity_category: config
    icon: mdi:current-dc
    options:
      - "10.0"
      - "20.0"
      - "30.0"
      - "40.0"
      - "50.0"
      - "60.0"
      - "70.0"
      - "80.0"
      - "90.0"
      - "100.0"
    optimistic: True
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_max_charging_current
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]                   

  - platform: template
    name: "Max. AC Charging Current"
    id: select_max_ac_charging_current
    entity_category: config
    icon: mdi:current-ac
    options:
      - "2.0"
      - "10.0"
      - "20.0"
      - "30.0"
      - "40.0"
      - "50.0"
      - "60.0"
      - "70.0"
      - "80.0"
      - "90.0"
      - "100.0"
    optimistic: True
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_max_ac_charging_current
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]                   

  - platform: template
    name: "Battery Under Voltage"
    id: select_battery_under_voltage
    entity_category: config
    icon: mdi:battery-alert
    options:
      - "40.0"
      - "40.1"
      - "42.0"
      - "43.0"
      - "44.0"
      - "45.0"
      - "46.0"
      - "47.0"
      - "48.0"
    optimistic: true
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_battery_under_voltage
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]         

  - platform: template
    name: "Battery Redischarge Voltage"
    id: select_battery_redischarge_voltage
    entity_category: config
    icon: mdi:battery-minus
    options:
      - "00.0"
      - "47.0"
      - "48.0"
      - "49.0"
      - "50.0"
      - "51.0"
      - "52.0"
      - "53.0"
      - "54.0"      
      - "55.0"      
    optimistic: true
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_battery_redischarge_voltage
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]  

  - platform: template
    name: "Battery Recharge Voltage"
    id: select_battery_recharge_voltage
    entity_category: config
    icon: mdi:battery-charging-50
    options:
      - "43.0"
      - "44.0"
      - "45.0"
      - "46.0"
      - "47.0"
      - "48.0"
      - "49.0"      
    optimistic: true
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_battery_recharge_voltage
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]  

  - platform: template
    name: "Battery Float Charge Voltage"
    id: select_battery_float_charge_voltage
    entity_category: config
    icon: mdi:battery-charging-80
    options:
      - "52.0"
      - "52.1"
      - "52.2"
      - "52.3"
      - "52.4"
      - "52.5"
      - "52.6"
      - "52.7"
      - "52.8"
      - "52.9"
      - "53.0"
      - "53.1"
      - "53.2"
      - "53.3"                        
    optimistic: true
    set_action:
      then:
        - output.pipsolar.set_level:
            id: output_battery_float_voltage
            value: !lambda return std::stof(x.c_str());
        - logger.log:
            format: "Chosen option: %s"
            args: ["x.c_str()"]
